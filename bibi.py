__name__ = 'bibi'
__version__ = '0.1.1'
import os.path

def parse_file(filename):
	if not os.path.exists(filename):
		print " * BibTeX file not found: %s" % filename
		return {}
	bib = {}	
	with open(filename) as fin:	
		entry = ''
		key = ''
		for line in fin:
			if line.startswith('@'):
				# begin
				entry = line
				key = line[line.find('{') + 1 : line.find(',')]
			elif line=='}\n':
				# end
				entry += line
				bib[key] = entry
				key = ''
				line = ''
			else:
				entry += line
	return bib


def to_file(filename, bib, keys):
	if not bib:
		return
	fout = open(filename, 'w')
	fout.write("Automatically generated by %s %s\n" % (__modulename__, __version__))
	fout.write("Any changes to this file will be lost if it is regenerated by %s.\n\n" % __modulename__)
	for k in keys:
		entry = bib.get(k, '')
		fout.write(entry)
	fout.close()


def to_string(bib, keys):
	if not bib:
		return ''
	return ''.join([bib.get(k, '') for k in keys])


if __name__ == '__main__':
	bib = parse_file(r'd:\library.bib')
	# test
	to_file('tmp.bib', bib, ['Altenberg2011', 'Gavrilets2003', 'Gordo2005'])
	print to_string(bib, ['Ram2012'])